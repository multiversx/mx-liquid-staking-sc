// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct VoteSCProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for VoteSCProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = VoteSCProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        VoteSCProxyMethods { wrapped_tx: tx }
    }
}

pub struct VoteSCProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> VoteSCProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> VoteSCProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn set_root_hash<
        Arg0: ProxyArg<ManagedByteArray<Env::Api, 32usize>>,
        Arg1: ProxyArg<u32>,
    >(
        self,
        root_hash: Arg0,
        proposal_id: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("set_root_hash")
            .argument(&root_hash)
            .argument(&proposal_id)
            .original_result()
    }

    pub fn set_liquid_staking_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("set_liquid_staking_address")
            .argument(&address)
            .original_result()
    }

    pub fn delegate_vote<
        Arg0: ProxyArg<u32>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<BigUint<Env::Api>>,
        Arg3: ProxyArg<ArrayVec<ManagedByteArray<Env::Api, 32usize>, 18usize>>,
    >(
        self,
        proposal_id: Arg0,
        vote: Arg1,
        voting_power: Arg2,
        proof: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("delegate_vote")
            .argument(&proposal_id)
            .argument(&vote)
            .argument(&voting_power)
            .argument(&proof)
            .original_result()
    }

    pub fn liquid_staking_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("liquid_staking_sc")
            .original_result()
    }

    pub fn get_root_hash<
        Arg0: ProxyArg<u32>,
    >(
        self,
        proposal_id: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, OptionalValue<ManagedByteArray<Env::Api, 32usize>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getProposalRootHash")
            .argument(&proposal_id)
            .original_result()
    }

    pub fn confirm_voting_power<
        Arg0: ProxyArg<u32>,
        Arg1: ProxyArg<BigUint<Env::Api>>,
        Arg2: ProxyArg<ArrayVec<ManagedByteArray<Env::Api, 32usize>, 18usize>>,
    >(
        self,
        proposal_id: Arg0,
        voting_power: Arg1,
        proof: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("confirmVotingPower")
            .argument(&proposal_id)
            .argument(&voting_power)
            .argument(&proof)
            .original_result()
    }
}
